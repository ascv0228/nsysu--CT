import cv2
import numpy as np
import matplotlib.pyplot as plt

from PIL import Image as im

# image = (np.random.standard_normal([200, 200, 3]) * 255).astype(np.uint8)

# # Convert to grayscale (1 channel)
# print(image.shape)
# gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# gray_three_channel = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)
# print(gray_three_channel[0,0])
# data = im.fromarray(gray)
# data.show()
# # plt.imshow(data, cmap='gray', vmin = 0, vmax = 255,interpolation='none')
# # plt.imshow(gray_three_channel)

# import numpy as np
# import matplotlib.pyplot as plt

# x=np.linspace(0,5,50)
# y=np.sin(2 * np.pi * x)

# # plt.scatter(x, y)
# plt.plot(x, y, color="red")
# plt.title("Connected Scatterplot points with line")
# plt.xlabel("x")
# plt.ylabel("sinx")
# plt.show()
# figure.tight_layout()

# d = {'a':[0, 1, 2], 'b': [1, -1, -2], 'c' : [1, 2, 2], 'd' : [0, 2, 2], 'e' : [-1, 1, 2]}
# L = d.keys()
# L2 = sorted(L, key=lambda x: -d[x][0])
# print(L2)
# print([d[x] for x in L2])

x_new = [0.0, 194.0, 396.0, 138.0, 67.0, 239.0, 26.0, 149.0, 52.0, 19.0, 300.0, 624.0, 46.0, 38.0, 68.0, 154.0, 295.0, 28.0, 479.0, 32.0, 101.0, 743.0, 431.0, 1114.0, 53.0, 24.0, 68.0, 153.0, 429.0, 85.0, 27.0, 374.0, 106.0, 178.0, 29.0, 128.0, 292.0, 192.0, 234.0, 117.0, 172.0, 867.0, 1668.0, 12.0, 76.0, 19.0, 623.0, 707.0, 19.0, 130.0, 657.0, 29.0, 160.0, 44.0, 20.0, 1141.0, 137.0, 197.0, 21.0, 159.0, 293.0, 13.0, 74.0, 89.0, 29.0, 148.0, 301.0, 95.0, 321.0, 573.0, 156.0, 295.0, 51.0, 128.0, 1543.0, 333.0, 167.0, 347.0, 103.0, 86.0, 622.0, 158.0, 45.0, 3693.0, 69.0, 100.0, 28.0, 25.0, 63.0, 1395.0, 30.0, 1342.0, 70.0, 201.0, 115.0, 274.0, 17.0, 1348.0, 909.0, 13.0, 335.0, 94.0, 51.0, 340.0, 14.0, 17.0, 370.0, 548.0, 747.0, 441.0, 17.0, 12.0, 23.0, 133.0, 52.0, 
103.0, 1872.0, 395.0, 218.0, 421.0, 430.0, 84.0, 22.0, 472.0, 101.0, 137.0, 56.0, 62.0, 640.0, 52.0, 44.0, 179.0, 48.0, 66.0, 209.0, 14.0, 208.0, 83.0, 1106.0, 18.0, 340.0, 26.0, 79.0, 51.0, 130.0, 210.0, 12.0, 691.0, 469.0, 1233.0, 1242.0, 99.0, 161.0, 333.0, 50.0, 82.0, 883.0, 222.0, 1471.0, 85.0, 364.0, 234.0, 105.0, 102.0, 74.0, 110.0, 104.0, 101.0, 39.0, 192.0, 393.0, 1167.0, 37.0, 156.0, 33.0, 96.0, 24.0, 468.0, 1007.0, 1163.0, 20.0, 816.0, 1628.0, 
23.0, 79.0, 33.0, 11.0, 652.0, 29.0, 65.0, 429.0, 77.0, 44.0, 69.0, 193.0, 239.0, 219.0, 7.0, 39.0, 686.0, 32.0, 240.0, 214.0, 195.0, 176.0, 114.0, 288.0, 446.0, 1269.0, 103.0, 207.0, 68.0, 129.0, 153.0, 422.0, 25.0, 50.0, 704.0, 559.0, 39.0, 19.0, 109.0, 312.0, 111.0, 174.0, 95.0, 79.0, 947.0, 30.0, 44.0, 36.0, 65.0, 27.0, 96.0, 476.0, 1228.0, 29.0, 81.0, 70.0, 49.0, 103.0, 19.0, 894.0, 53.0, 148.0, 169.0, 398.0, 4908.0, 337.0, 221.0, 90.0, 53.0, 217.0, 
65.0, 369.0, 788.0, 104.0, 300.0, 107.0, 81.0, 212.0, 303.0, 433.0, 148.0, 360.0, 144.0, 21.0, 127.0, 71.0, 4.0, 11.0, 84.0, 244.0, 423.0, 318.0, 208.0, 
358.0, 356.0, 191.0, 112.0, 91.0, 76.0, 110.0, 229.0, 425.0, 1413.0, 0.0, 33.0]
y_new = [0, 161, 499, 49, 103, 138, 41, 282, 27, 44, 216, 442, 40, 0, 76, 103, 439, 91, 562, 69, 131, 925, 288, 3437, 130, 0, 172, 85, 605, 97, 84, 332, 30, 152, 64, 158, 691, 296, 477, 212, 137, 1558, 2550, 13, 145, 0, 1281, 1000, 32, 103, 880, 0, 202, 44, 36, 1222, 272, 250, 55, 334, 533, 18, 59, 57, 0, 233, 456, 28, 331, 549, 242, 597, 96, 170, 1066, 583, 142, 641, 197, 49, 1000, 208, 59, 5674, 101, 119, 56, 48, 200, 1860, 16, 1860, 53, 275, 72, 341, 46, 1865, 1250, 35, 481, 136, 42, 526, 56, 29, 635, 2694, 940, 402, 48, 0, 0, 200, 47, 72, 2289, 739, 212, 287, 940, 55, 6, 227, 46, 50, 113, 113, 514, 106, 119, 
48, 82, 347, 2028, 92, 323, 210, 1253, 11, 798, 22, 345, 131, 206, 280, 12, 1112, 611, 2567, 1027, 41, 321, 377, 44, 179, 861, 138, 3122, 60, 285, 423, 106, 11, 142, 42, 172, 233, 221, 515, 522, 2196, 103, 201, 0, 88, 152, 341, 2163, 3388, 55, 1529, 1274, 29, 57, 89, 560, 1392, 29, 53, 452, 115, 94, 0, 439, 390, 211, 0, 205, 730, 0, 341, 397, 293, 190, 119, 2568, 589, 906, 134, 46, 49, 198, 171, 704, 7, 51, 923, 597, 28, 0, 517, 216, 9, 191, 108, 119, 1194, 8, 60, 37, 52, 32, 27, 590, 1322, 14, 86, 26, 102, 162, 0, 1953, 0, 75, 112, 823, 8229, 633, 105, 152, 19, 184, 5, 258, 823, 56, 63, 30, 48, 295, 107, 242, 307, 507, 84, 18, 159, 142, 3, 25, 26, 473, 3187, 393, 421, 193, 238, 287, 170, 96, 80, 149, 378, 789, 1888, 0, 23]


x_old = [0.0, 194.0, 396.0, 138.0, 67.0, 239.0, 26.0, 149.0, 52.0, 19.0, 300.0, 624.0, 46.0, 38.0, 68.0, 154.0, 295.0, 28.0, 479.0, 32.0, 101.0, 743.0, 431.0, 1114.0, 53.0, 24.0, 68.0, 153.0, 429.0, 85.0, 27.0, 374.0, 106.0, 178.0, 29.0, 128.0, 292.0, 192.0, 234.0, 117.0, 172.0, 867.0, 1668.0, 12.0, 76.0, 19.0, 623.0, 707.0, 19.0, 130.0, 657.0, 29.0, 160.0, 44.0, 20.0, 1141.0, 137.0, 197.0, 21.0, 159.0, 293.0, 13.0, 74.0, 89.0, 29.0, 148.0, 301.0, 95.0, 321.0, 573.0, 156.0, 295.0, 51.0, 128.0, 1543.0, 333.0, 167.0, 347.0, 103.0, 86.0, 622.0, 158.0, 45.0, 3693.0, 69.0, 100.0, 28.0, 25.0, 63.0, 1395.0, 30.0, 1342.0, 70.0, 201.0, 115.0, 274.0, 17.0, 1348.0, 909.0, 13.0, 335.0, 94.0, 51.0, 340.0, 14.0, 17.0, 370.0, 548.0, 747.0, 441.0, 17.0, 12.0, 23.0, 133.0, 52.0, 
103.0, 1872.0, 395.0, 218.0, 421.0, 430.0, 84.0, 22.0, 472.0, 101.0, 137.0, 56.0, 62.0, 640.0, 52.0, 44.0, 179.0, 48.0, 66.0, 209.0, 14.0, 208.0, 83.0, 1106.0, 18.0, 340.0, 26.0, 79.0, 51.0, 130.0, 210.0, 12.0, 691.0, 469.0, 1233.0, 1242.0, 99.0, 161.0, 333.0, 50.0, 82.0, 883.0, 222.0, 1471.0, 85.0, 364.0, 234.0, 105.0, 102.0, 74.0, 110.0, 104.0, 101.0, 39.0, 192.0, 393.0, 1167.0, 37.0, 156.0, 33.0, 96.0, 24.0, 468.0, 1007.0, 1163.0, 20.0, 816.0, 1628.0, 
23.0, 79.0, 33.0, 11.0, 652.0, 29.0, 65.0, 429.0, 77.0, 44.0, 69.0, 193.0, 239.0, 219.0, 7.0, 39.0, 686.0, 32.0, 240.0, 214.0, 195.0, 176.0, 114.0, 288.0, 446.0, 1269.0, 103.0, 207.0, 68.0, 129.0, 153.0, 422.0, 25.0, 50.0, 704.0, 559.0, 39.0, 19.0, 109.0, 312.0, 111.0, 174.0, 95.0, 79.0, 947.0, 30.0, 44.0, 36.0, 65.0, 27.0, 96.0, 476.0, 1228.0, 29.0, 81.0, 70.0, 49.0, 103.0, 19.0, 894.0, 53.0, 148.0, 169.0, 398.0, 4908.0, 337.0, 221.0, 90.0, 53.0, 217.0, 
65.0, 369.0, 788.0, 104.0, 300.0, 107.0, 81.0, 212.0, 303.0, 433.0, 148.0, 360.0, 144.0, 21.0, 127.0, 71.0, 4.0, 11.0, 84.0, 244.0, 423.0, 318.0, 208.0, 
358.0, 356.0, 191.0, 112.0, 91.0, 76.0, 110.0, 229.0, 425.0, 1413.0, 0.0, 33.0]
y_old =[0, 151, 466, 42, 103, 138, 41, 268, 22, 44, 210, 435, 40, 0, 76, 98, 439, 91, 543, 64, 128, 912, 272, 3426, 130, 0, 166, 81, 586, 94, 79, 328, 28, 149, 
64, 154, 687, 284, 473, 191, 124, 1553, 2506, 7, 142, 0, 1242, 987, 32, 103, 879, 0, 202, 41, 36, 1184, 261, 248, 53, 330, 502, 18, 55, 56, 0, 221, 452, 
14, 314, 534, 240, 587, 92, 168, 1043, 580, 142, 628, 194, 48, 974, 205, 59, 5647, 101, 114, 53, 41, 199, 1817, 15, 1847, 53, 274, 72, 324, 42, 1851, 1244, 35, 469, 133, 38, 492, 53, 28, 622, 2665, 933, 401, 48, 0, 0, 190, 47, 67, 2260, 708, 210, 271, 932, 53, 3, 223, 43, 47, 112, 108, 480, 104, 118, 41, 
76, 337, 2025, 89, 313, 210, 1242, 11, 782, 22, 339, 109, 191, 276, 6, 1098, 598, 2539, 1005, 33, 309, 360, 42, 176, 854, 124, 3104, 53, 260, 401, 106, 5, 126, 32, 165, 225, 203, 512, 520, 2168, 98, 187, 0, 73, 145, 334, 2162, 3368, 53, 1491, 1270, 29, 50, 88, 513, 1386, 26, 50, 437, 112, 94, 0, 436, 386, 209, 0, 187, 696, 0, 341, 384, 266, 178, 113, 2554, 581, 861, 134, 37, 43, 193, 171, 689, 4, 46, 917, 585, 28, 0, 517, 188, 4, 181, 98, 115, 1174, 4, 60, 34, 52, 32, 22, 589, 1275, 14, 83, 26, 102, 140, 0, 1927, 0, 69, 103, 819, 8177, 616, 88, 149, 16, 171, 2, 250, 814, 46, 61, 30, 46, 279, 95, 234, 307, 498, 80, 18, 156, 123, 1, 22, 18, 467, 3152, 382, 385, 184, 232, 258, 165, 88, 80, 144, 370, 770, 1868, 0, 23]

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import random
print (len(x_old))
print (len(x_new))
x = x_old + x_new
y = y_old + y_new
# y = list(map(lambda i : 1000 if i > 1000 else i, y))
# x = list(map(lambda i : 1000 if i > 1000 else i, x))
cat = ['old']*len(x_old) + ['new']*len(x_new)
df = pd.DataFrame({"x_SDCT": x,
                   "y_LDCT": y,
                  'Category':cat})

sns.lmplot(x= 'x_SDCT', y = 'y_LDCT', data = df, hue = 'Category', palette=dict(new="g", old="blue"))
plt.grid()
plt.savefig('Category')


# Focus
y = list(map(lambda i : 1000 if i > 1000 else i, y))
x = list(map(lambda i : 1000 if i > 1000 else i, x))
cat = ['old']*len(x_old) + ['new']*len(x_new)
df = pd.DataFrame({"x_SDCT": x,
                   "y_LDCT": y,
                  'Category':cat})

sns.lmplot(x= 'x_SDCT', y = 'y_LDCT', data = df, hue = 'Category', palette=dict(new="g", old="blue"))
plt.grid()
plt.savefig('Category_Focus_1000')
